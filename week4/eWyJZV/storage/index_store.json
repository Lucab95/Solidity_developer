{"docstore/data":{"7535ed58-b7c5-4867-8164-1eb90fa5f124":{"indexId":"7535ed58-b7c5-4867-8164-1eb90fa5f124","nodesDict":{"6e7c04a4-4217-459b-8493-0d561fadd419":{"id_":"6e7c04a4-4217-459b-8493-0d561fadd419","metadata":{"page_number":1,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"8a09d21a-c5ae-4661-849e-bc13151b3c6d","metadata":{"page_number":1,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"UOsBe/tK96T8cSsazH9pqwN7MYfD15SJrNe+vnroveM="}},"text":"Title Part I\nand maybe\nTitle Part II\nA Thesis submitted for the completion of\nrequirements for the degree of\nBachelor of Science\n(Research)\nby\nYour Name\nUndergraduate Programme\nIndian Institute of Science\nUnder the supervision of\nProf. Your Advisor\nYour Advisor’s Institute\nProf. Your Proxy\nDepartment of Physics, Indian Institute of Science","textTemplate":"","endCharIdx":341,"metadataSeparator":"\n","type":"TEXT","hash":"rdpczMX5l+G8vhY86V55017oDxZXULgbCW8wb4Mmilc="},"2e6826a7-a480-48bc-8a7e-dc6527ab1213":{"id_":"2e6826a7-a480-48bc-8a7e-dc6527ab1213","metadata":{"page_number":2,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"fe3405ce-0a14-4ee2-a3b8-5d056bf3482d","metadata":{"page_number":2,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"pWoZPL6vLC+VlbC+hYkWdsUPVXJG/AvSf8eTHj0m9R4="}},"text":"2","textTemplate":"","endCharIdx":1,"metadataSeparator":"\n","type":"TEXT","hash":"rCbS+KrcJORCH6GC0QTN/PZQ7xQaG54qj1fg5j3mJdg="},"e1c46e03-b913-4f56-8461-1e4a743e638a":{"id_":"e1c46e03-b913-4f56-8461-1e4a743e638a","metadata":{"page_number":3,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"5e0d665e-feab-472e-b0ea-7724f3c2826a","metadata":{"page_number":3,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"BNOcCg7RqU7Qx1JAodqfrgJTYMdZ8ABRmE+oFzR3LQ8="}},"text":"Acknowledgements\nDedicated to Prashant. Template credits: Biplab Mahato.\nAbstract\nArtificial Intelligence (AI) and blockchain are two the most cutting edge technologies of\nour time, and intersecting two of them is a matter of time. However, this intersection\nintroduce critical challenges: mostly centralized and probabilistic-driven AI does not\nalign with the distributed and deterministic nature of blockchain. While blockchain\nprovides immutability and transparency, AI operates as a black box making their out-\nputs hard to verify, structure, and use in decentralized applications (dApps). This\nthesis presents a framework to obtain a connection between dApps and AI systems in\na verifiable and transparent way.\nExisting solutions lack of verifiable AI interactions and require trust assumptions\nand opaque user experience. To solve this, the proposed solution enforces a trace-\nable and deterministic interaction model: Blockchain → Oracle → AI → Oracle →\nBlockchain. This ensures that users can verify AI-generated outputs at every stage\nand detect potential data manipulation.\nThe research methodology involves designing and implementing a proof-of-concept\ndApp—an AI-driven game where users attempt to influence AI decisions. The system\nconsists of Solidity-based smart contracts, an off-chain AI Oracle written in Golang,\nand a React-based frontend for showcasing the verification and demonstrating the user\nexperience. Fraud-proof mechanisms allow users to manually trace AI interactions,\nensuring data integrity.\nThe results demonstrate that Verifiable AI Oracles enhance the trust of AI-blockchain\napplications, providing a secure and transparent integration model. Furthermore, the\nthesis contributes to the field by offering an open-source implementation and a develop-\nment framework for future AI-powered dApps. This research serves as a foundational\nstep towards building deterministic AI interactions in decentralized systems, opening\nthe way for further advancements in verifiable AI applications and automated fraud\ndetection mechanisms.\n1","textTemplate":"","endCharIdx":2059,"metadataSeparator":"\n","type":"TEXT","hash":"S12Sd9qi6a0cGdDnRN1ybnCVuYtOpylok+Nb4894uxA="},"fc4cdb3f-0d7b-49d7-a959-a3c6a817b84b":{"id_":"fc4cdb3f-0d7b-49d7-a959-a3c6a817b84b","metadata":{"page_number":4,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"d8de308b-b687-4470-8cf5-646d3ff71741","metadata":{"page_number":4,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"KS8SyCG8I6ApF+z12BVIcYO4iKfs17aSN+iJhFkh088="}},"text":"Contents\nI Introduction 5\n1 Objectives 5\n2 Thesis Structure 5\nII Blockchain 6\n3 Overview 6\n4 Transaction Lifecycle 7\n4.1 Transaction Submission . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n4.2 Transaction Execution . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n4.3 Reaching Consensus . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n4.4 Final State and Network Synchronization . . . . . . . . . . . . . . . . . 11\n5 Block Internals 12\n5.1 Block Header . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n5.2 Merkle Root . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.3 State Transitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n6 Replicated State Machine 14\n7 Smart Contracts 15\nIII Artificial Intelligence 17\nIV AI-Blockchain Interaction 18\n8 Solutions 18\n8.1 Oracle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n8.2 Trusted Execution Environment (TEE) . . . . . . . . . . . . . . . . . . 18\n2","textTemplate":"","endCharIdx":1015,"metadataSeparator":"\n","type":"TEXT","hash":"5YnjFzU/JJLBeO4SH5d1T/IIn3aq/kWSDAic69F45PM="},"4e894df4-2049-482d-99f6-0e80f65de789":{"id_":"4e894df4-2049-482d-99f6-0e80f65de789","metadata":{"page_number":5,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"b0a7fac9-08fa-42b1-a5e2-b9c8213ac91e","metadata":{"page_number":5,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"c4zwcVoNhOpNe8FiDmsyFs0ah9ggYI6MO+cSka6TrWM="},"NEXT":{"nodeId":"31080368-ed3b-4658-a9fb-f1becd37e11d","metadata":{},"hash":"7C8oLbvn2DsHuQPtV4fl4suI37g5FQYktXs1iywATWE="}},"text":"8.3 Zero-knowledge Proofs (ZKP) . . . . . . . . . . . . . . . . . . . . . . .19\n9 Challenges 19\n9.1 Closed Nature of Blockchain . . . . . . . . . . . . . . . . . . . . . . . .19\n9.2 Throughput and Latency . . . . . . . . . . . . . . . . . . . . . . . . . .20\n9.3 Resource Limitation . . . . . . . . . . . . . . . . . . . . . . . . . . . .20\n9.4 Trust and Verification . . . . . . . . . . . . . . . . . . . . . . . . . . .21\n10 Use Cases 21\n11 Oracles 21\nV Problem Definition and Motivation 23\n12 Objectives 23\n13 Thesis Structure 23\nVI Methodology 24\n14 Use Case 24\n14.1 Game Concept and Motivation . . . . . . . . . . . . . . . . . . . . . .24\n14.2 Overall Flow and Rationale . . . . . . . . . . . . . . . . . . . . . . . .24\n14.3 Purpose and Benefits of the Use Case . . . . . . . . . . . . . . . . . . .25\n15 Requirements 26\n15.1 Functional Requirements . . . . . . . . . . . . . . . . . . . . . . . . . .26\n15.2 Non-Functional Requirements . . . . . . . . . . . . . . . . . . . . . . .28\n15.3 Additional Constraints and Considerations . . . . . . . . . . . . . . . .30\n16 Architecture 30\n16.1 High-Level Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . .","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"eBNamArc/yEBGxQdJCbyN7i7xJB/J16WhEEZtyOiqVs="},"31080368-ed3b-4658-a9fb-f1becd37e11d":{"id_":"31080368-ed3b-4658-a9fb-f1becd37e11d","metadata":{"page_number":5,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"b0a7fac9-08fa-42b1-a5e2-b9c8213ac91e","metadata":{"page_number":5,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"c4zwcVoNhOpNe8FiDmsyFs0ah9ggYI6MO+cSka6TrWM="},"PREVIOUS":{"nodeId":"4e894df4-2049-482d-99f6-0e80f65de789","metadata":{"page_number":5,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"eBNamArc/yEBGxQdJCbyN7i7xJB/J16WhEEZtyOiqVs="}},"text":"30\n16.2 Sequence Diagram . . . . . . . . . . . . . . . . . . . . . . . . . . . . .32\n17 Tools 33\n3","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"wXSZ0xtMzUPLs6mTzE+Ym8IWfOPhaJwZNje8I3U9H40="},"91314c16-3df8-4328-bc7d-b59d5191ba8c":{"id_":"91314c16-3df8-4328-bc7d-b59d5191ba8c","metadata":{"page_number":6,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"5d8179c1-a12e-4605-a88e-6db82085286c","metadata":{"page_number":6,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"anbQvRpQ/sbADnFkzZ8Q6U4GX9RBYL+VDPa+d0PKark="}},"text":"18 Development 35\n19 Deployment 35\n20 Testing 35\nVII Conclusion 37\n20.1 Runtime metrics Performance Analysis . . . . . . . . . . . . . . . . . . 37\n20.2 Statistics Gathering Feedback . . . . . . . . . . . . . . . . . . . . . . . 37\n20.3 Security Considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n20.4 Further Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n4","textTemplate":"","endCharIdx":403,"metadataSeparator":"\n","type":"TEXT","hash":"hfswcGISrgjJ/hFJVn3dmbvJfNSoZNAInH6AvgoO9to="},"6f393318-76b8-4e31-948c-04c134256f87":{"id_":"6f393318-76b8-4e31-948c-04c134256f87","metadata":{"page_number":7,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a3bd6a19-25a9-4705-8074-4a26055faf1f","metadata":{"page_number":7,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"iv0RK0jlQQF4xvnUST3WfBFgaSJjwqkvEeHwCr28FQg="}},"text":"Part I\nIntroduction\n1 Objectives\nThe development of both AI and blockchain technology lead to significant growth\nin decentralized AI applications. These dApps are seeking for ways to leverage AI\ncomputational power and flexibility alongside blockchain’s immutability, trust execu-\ntion, and ease of financial integration. In the last few months, over 30 projects have\nlaunched their AI–based dApps [1]. Some projects, e.g., [GAIA.a](http://GAIA.ao)i [2]\nor Freysa [3], leverage AI to make on-chain (using blockchain settlement) games where\nusers interact with AI models using blockchain transactions. Others, e.g., Zerebro [4],\ntake advantage of the AI creative and intelligent capabilities to turn it into a digital\npersona who runs a successful X (ex. Twitter) account (over 120.000 subscribers at\nthe time of writing) [5] or produces music [6]. Furthermore, some teams help create\nframeworks for facilitating emergence of AI–blockchain, for instance ElizaOS [7].\nHowever, AI-generated outputs remain largely unverifiable within blockchain projects,\nposing critical security and reliability challenges. Unlike blockchain, which operates\ndeterministically, AI models introduce probabilistic and non-deterministic behavior,\nmaking their integration with smart contracts problematic. Products frequently rely\non unverified middle-man solutions or centralized software and black boxes. This thesis\nintroduces **Verifiable AI Oracles**, a framework designed to ensure the authenticity\nand verifiability of AI-generated responses when used in decentralized applications.\n2 Thesis Structure\n5","textTemplate":"","endCharIdx":1587,"metadataSeparator":"\n","type":"TEXT","hash":"5wzGwEA7pggAgKKZwyj92fO9raVA+rv0aKuZ8kgN8yA="},"481737a8-ebc3-4442-8819-947ea41dd92f":{"id_":"481737a8-ebc3-4442-8819-947ea41dd92f","metadata":{"page_number":8,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"1082a7fc-41ec-42b4-b76a-c21bd0722606","metadata":{"page_number":8,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"BxMWPOZIyr6clB+vP980ZoUmYg68lb2nqnhUE+cWhrs="}},"text":"Part II\nBlockchain\n3 Overview\nBlockchain technology originates from cryptographic and mathematical research car-\nried out over the last 30 years before the breakthrough invention of Bitcoin [1], originally\npublished by an anonymous individual or a group known as Satoshi Nakamoto [2]. The\nmain problem that Bitcoin addressed is the inefficiency of modern financial systems.\nModern finances and banking in particular rely on highly centralized infrastructure and\nthird-party institutions, introducing excessive and unnecessary costs of transactions,\nlong-spread transaction settlement time, and increased exposure to faults.\nFig. 1 demonstrates the example of a traditional international transfer initiated by\nAlice from Hungary who wants to transfer money to Bob from the USA. In every shown\nbank-to-bank transition, fees are charged, and the transaction might become lost or\ncorrupted for some reason. Furthermore, such a transfer might take multiple business\ndays to proceed depending on the working hours of bank offices and their workload [3].\nFigure 1: Traditional international transfer\nIn the Bitcoin white paper, Nakamoto described Bitcoin as a purely peer-to-peer\ndigital cash system that eliminated trusted third parties in online payments. One of\nthe main innovations was solving the ”double spending” problem in digital finances.\nOriginally, digital cash required a centralized entity to audit and prevent spending the\nsame money twice. Nakamoto’s solution relied on a distributed network that times-\ntamps transactions in an ongoing chain of hashed blocks. Generating blocks requires\ninvesting computational efforts into them, making fraud expensive—the mechanism\n6","textTemplate":"","endCharIdx":1678,"metadataSeparator":"\n","type":"TEXT","hash":"0P+SyV+X5XKM8BRG6+FXv++zYPMtCqp/16NQEFoWeqI="},"4238c1a6-63b2-4d79-b8f1-0ae7ee2c45e0":{"id_":"4238c1a6-63b2-4d79-b8f1-0ae7ee2c45e0","metadata":{"page_number":9,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"53bc19d3-0208-49f5-9487-8a04d36fa2e5","metadata":{"page_number":9,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"/c/Zzr3OxTBhTlDKDHGPmrXst2A6mijsajtc1yIEoCw="},"NEXT":{"nodeId":"34102f73-726e-4dd7-b862-380faa4f4a6c","metadata":{},"hash":"qaPqEBtodWa8FG6mbCDmdCPH3AaYLIO9OOCB4KlXYEQ="}},"text":"known as Proof-of-Work consensus algorithm.The chain of blocks is persisted on mul-\ntiple nodes forming an immutable record.As long as the majority of nodes are honest\n(meaning, the majority of computational power is invested in the honest chain), the\nlongest chain will be the accepted history.Changing some data in the past implies\nchanging the entire history and spending huge computational resources into it, mak-\ning it impractical.This allowed Bitcoin to achieve consensus on transactions without\ncentralized entities like banks, solving the double-spending problem by cryptographic\nproof instead of trust [2].The success of Bitcoin demonstrated that a decentralized ledger could enforce\ncommunication trust at scale.In later years, blockchain evolved beyond the con-\ncept of cryptocurrency [4].In 2014, Vitalik Buterin proposed Ethereum as a ”next-\ngeneration smart contract and decentralized application platform”.Ethereum extended\nthe traditional capabilities of blockchain by introducing programmable smart con-\ntracts—allowing the execution of arbitrary code modifying the state of the blockchain\n[5].This made blockchain a general-purpose computational platform rather than just\na cryptocurrency.The smart contract concept was developed by Nick Szabo in 1997\n[6], but Ethereum was the first to implement it at scale using a Turing-complete lan-\nguage—Solidity.Further, blockchain faced rapid innovation: from breakthroughs in\nfinances (inventing the concept of DeFi—decentralized finances) to enterprise and\ngovernment solutions [berkeley2016].With the development of smart contracts,\nblockchain allowed creating anything that can be coded using traditional program-\nming languages, making the system extremely flexible while at the same time leverag-\ning main blockchain advantages—decentralized execution, trustless operation, history\npreservation, record safety, and immutability [4].4 Transaction Lifecycle\nThis section examines the fundamental processes that govern blockchain transactions,\nfrom the transaction submission to the final state.4.1 Transaction Submission\nIn blockchain systems, transactions begins with a user request that must be propagated\nthroughout the network before processing [2].Fig.2 illustrated this step: Alice initiates\na transaction to transfer to transfer $10 from her account to Bob.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"PISKZ2Bek1NPc3kIYkBXg4onEmJ1WeJkPvkkOWHQlNI="},"34102f73-726e-4dd7-b862-380faa4f4a6c":{"id_":"34102f73-726e-4dd7-b862-380faa4f4a6c","metadata":{"page_number":9,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"53bc19d3-0208-49f5-9487-8a04d36fa2e5","metadata":{"page_number":9,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"/c/Zzr3OxTBhTlDKDHGPmrXst2A6mijsajtc1yIEoCw="},"PREVIOUS":{"nodeId":"4238c1a6-63b2-4d79-b8f1-0ae7ee2c45e0","metadata":{"page_number":9,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"PISKZ2Bek1NPc3kIYkBXg4onEmJ1WeJkPvkkOWHQlNI="}},"text":"Alice’s starting\nbalance is $15, Bob’s starting balance is $5.The transaction might be sibmitted to\nany node in the network.Alice submits it to Node 1.Upon receiving the transaction, the node does not process it immediately but in-\n7","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"eRhk2NeTcSu/TqkZhfP8QEGPDKCpn6ZSTWe3E6gInwU="},"38d73f38-e396-4fdc-b412-2a06536c01db":{"id_":"38d73f38-e396-4fdc-b412-2a06536c01db","metadata":{"page_number":10,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"ef246f4a-0db6-4ef2-bfa7-f61444534217","metadata":{"page_number":10,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"X4Z7n/3HKtE8w+IWWSJv4Prh0p5D0hyv72ZvLg5Ct6U="}},"text":"Figure 2: Submit transaction\nstead broadcasts it to other nodes in the network. This broadcasting mechanism, often\nreferred to as ”gossip protocol” in distributed systems, ensures that all the nodes be-\ncome aware of pending transactions. The transaction enters each node’s mempool,\nwhich serves as a waiting area for unconfirmed transactions [7].\nThe broadcasting stage is critical as it makes the entire network aware of the trans-\naction before any validation, execution, or consensus process begins. This design re-\nflects blockchain’s intent to transparency and decentralization, where no single entity\nprocesses transactions in on their own.\n4.2 Transaction Execution\nOnce the transaction has been broadcast to all nodes, each node independently pro-\ncesses the transaction according to the blockchain’s protocol. This stage represents a\nactual execution: the transaction’s effects on account balances are calculated and its\nvalidity is determined [8].\nIn the Fig. 3, we observe how nodes process Alice’s transaction to send $10 to\nBob. Nodes 1, 2, and 3 correctly execute the transaction, updating the state to reflect\n8","textTemplate":"","endCharIdx":1127,"metadataSeparator":"\n","type":"TEXT","hash":"hJ9pyI4jol72tw2VAvaWJZqUVvlSVTA2/a2ttkp9GO8="},"09eb860a-707e-4e80-890b-4e8a03d245ba":{"id_":"09eb860a-707e-4e80-890b-4e8a03d245ba","metadata":{"page_number":11,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"07e8b6ce-e388-4921-9741-810614bd517b","metadata":{"page_number":11,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"i5upUjKBUfHnM+J26KenmisL0VJAnM8BD4wZkIX3xN0="}},"text":"Figure 3: Execution / Validation phase\nAlice’s new balance of $5 (15-10) and Bob’s new balance of $15 (5+10). However,\nNode 4 processes the transaction incorrectly, showing Alice with $3 (15-12) and Bob\nwith $17 (5+12). This issue illustrates a key challenge in distributed systems: ensuring\nconsistent execution across independent nodes.\nThe execution process differs based on the blockchain’s consensus mechanism. In\nProof of Work (PoW) systems like Bitcoin, this stage involves miners validating trans-\nactions and solving cryptographic puzzles to create new blocks [2]. In Proof of Stake\n(PoS) systems like Ethereum, validator nodes verify the block’s transactions based on\ntheir economic stake (invested funds) in the network [9].\nTransaction validation performs several checks:\n1. Verifying the transaction’s digital signature to ensure it was initiated by the\nrightful account owner. In our case, it ensures that Alice signed the transaction\nwith her private key [8].\n2. Confirming sufficient account balance for the transfer. Alice should has more\nthan $10 if she wants to transfer $10.\n3. Checking if the transaction satisfies blockchain’s protocol rules. For example,\n9","textTemplate":"","endCharIdx":1179,"metadataSeparator":"\n","type":"TEXT","hash":"bymgaINDB+gmJVHuTYwcPLt3SoougArS/nnmjKEeghg="},"ef88822f-6ccc-4fc8-91d3-5f1f3c6f449c":{"id_":"ef88822f-6ccc-4fc8-91d3-5f1f3c6f449c","metadata":{"page_number":12,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"dc9bb58e-026f-4ddf-97bd-3f3a2d4e7235","metadata":{"page_number":12,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"+hwqCJWpGHhIyYF0/cEb7lLfjNBsNrxS1AZdTC3XAaw="}},"text":"some addresses might be reserved by the system and cannot receive transactions.\n4. Validating the transaction format and required parameters there needed.\nThe validation stage serves as a critical defense against fraudulent or malformed\ntransactions, helping maintain the integrity of the blockchain.\n4.3 Reaching Consensus\nFigure 4: Consensus\nAfter individual nodes process transactions, the blockchain network must collec-\ntively agree on which state is correct — a process known as consensus. This process is\nreflected in the Fig. 4. This is a critical phase where nodes resolve potentially differing\noutcomes to establish a singular, agreed-upon state of the blockchain [10].\nIn the illustration, Nodes 1, 2, and 3 have reached identical states (Alice: $5, Bob:\n$15) after processing the transaction, while Node 4 maintains a divergent state (Alice:\n$3, Bob: $17). The consensus mechanism recognizes that a majority of nodes agree on\nthe same state, establishing it as the network’s accepted truth.\nConsensus mechanisms vary significantly across blockchain implementations:\n10","textTemplate":"","endCharIdx":1080,"metadataSeparator":"\n","type":"TEXT","hash":"+ywTnOHSqrkmCKzf1cYgeQmS6CwrXbVt3mAcBrSn2sA="},"168a6380-65b9-4924-8027-26641c174ba8":{"id_":"168a6380-65b9-4924-8027-26641c174ba8","metadata":{"page_number":13,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"20351d24-af1e-44d5-a1a8-182620eb5c01","metadata":{"page_number":13,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"/ALk53USl/yj0rEAJbiR/R4nkn+yPKsgj2KOs0DxrXw="}},"text":"1. In Proof of Work (PoW) blockchains, consensus occurs when miners validate new\nblocks by verifying the computational work performed. A new block is added to\nthe blockchain, and the transactions from the block are applied to update the\nledger state [2].\n2. In Proof of Stake (PoS) systems, validators vote on proposed blocks based on their\neconomic stake, and finalization occurs when a sufficient threshold of validators\ncast their votes for the same block. For example, more than 2/3 + 1 validator\nnodes, also known as supermajority, agree on some final state [5].\nThe consensus stage highlights one of blockchain’s goals: enabling disparate, in-\ndependent parties to reach agreement without central coordination [10]. This process\nresolves potential inconsistencies like the one demonstrated by Node 4, ensuring that\nall honest participants agree on a unified state. The consensus problem is also usually\nreferred to as the Byzantine Generals Problem [11].\n4.4 Final State and Network Synchronization\nFigure 5: Final state\nFig. 7 depicts the blockchain network after consensus has been reached and all nodes\n11","textTemplate":"","endCharIdx":1114,"metadataSeparator":"\n","type":"TEXT","hash":"oGRahJM67m8U/526ONd9k5fZy1FJeWS/nwMbZ//Lbd8="},"601097e1-5b7a-4a5e-9fe1-d2c026fc378a":{"id_":"601097e1-5b7a-4a5e-9fe1-d2c026fc378a","metadata":{"page_number":14,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a8f0a648-02b9-4ece-8f14-4a744ab7751e","metadata":{"page_number":14,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"cclWkPl7Peg3J7grJfJJcH/Y5KQ7q8J83N3CbuzMnoU="}},"text":"have synchronized to the correct state. This represents the final stage in the transac-\ntion lifecycle, where the distributed ledger achieves consistency across all participating\nnodes.\nAfter the consensus process, even Node 4, which previously had an incorrect state,\nhas now updated to match the network’s agreed state where Alice has $5 and Bob has\n$15. This synchronization ensures that regardless of which node a user queries, they\nwill receive the same information about account balances and transaction history. The\ndiagram specifically shows Bob making a synchronization request to Node 3 to verify\nhis updated balance of $15.\nThis transaction lifecycle shows fundamental blockchain characteristics [12]:\n1. State Replication: The identical state is maintained across multiple independent\nnodes, creating a resilient, fault-tolerant system where no single point of failure\nexists.\n2. Data Consistency: All nodes reflect the same information, ensuring that users\nreceive uniform responses regardless of which node they interact with.\n3. Tamper Evidence: Any attempt to alter historical transactions would create\ninconsistency with the majority state, making unauthorized changes immediately\ndetectable.\n4. Decentralized Authority: Users can verify information by querying any node in\nthe network rather than relying on a central authority.\nThe consistent replication of state across distributed nodes is what enables blockchain\nto function as a trusted system despite operating in an environment where individual\nparticipants may be unreliable or potentially malicious. This makes blockchain partic-\nularly valuable for applications requiring transparent, immutable, and highly available\nrecord-keeping without centralized control [10, 12].\n5 Block Internals\nFig. 6 illustrates the fundamental internal architecture of a blockchain block.\n5.1 Block Header\nAt the top of the diagram sits the Block Header, which contains critical metadata\nincluding the Block Hash. This hash serves as both the block’s unique identifier and\nits cryptographic seal. The Block Header contains two essential elements [2]:\n12","textTemplate":"","endCharIdx":2110,"metadataSeparator":"\n","type":"TEXT","hash":"FQJGQ+GXT0HYfY4vWASGPrGwgj7EY0O1eO0R+ll6GUQ="},"702546a5-32d0-4726-9c5a-5eee26f08d96":{"id_":"702546a5-32d0-4726-9c5a-5eee26f08d96","metadata":{"page_number":15,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"b697f9ff-0dd9-4997-917e-07ee6a5542fb","metadata":{"page_number":15,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"OUBCNiUPc8RGFXPb7sXVGFVanY3aDg90nMMc+ziCC40="}},"text":"Figure 6: Block internals\n1. Previous Hash: This field stores the hash value of the preceding block, creating\nthe cryptographic linkage that forms the ”chain” in blockchain. This linkage is\nfundamental to immutability—altering any data in a previous block would change\nits hash, breaking the chain and making tampering immediately evident.\n2. Merkle Root: This represents the root of a Merkle tree (or hash tree) that summa-\nrizes all transactions within the block. The Merkle tree structure helps efficient\nverification of the transaction as if any of them was modified or the transaction\norder was changed, the Merkle Root would change [13].\n5.2 Merkle Root\nThe diagram shows a hierarchical hashing structure that forms the Merkle tree [2, 13]:\n1. At the base level are individual transactions (Tx0, Tx1, Tx2) with Tx0 showing\n”Alice → Bob $10”, Tx1 showing ”Kirill → Anna $50”, and another transaction.\n2. These transactions are hashed individually (Hash0, Hash1, Hash2).\n3. Pairs of transaction hashes are then combined and hashed again (Hash01), con-\ntinuing upward until reaching the single Merkle Root that represents all transac-\ntions.\nThis serves as a checksum of all the transactions within the block. For example,\nif Tx1 was changed, this would change Hash1, subsequently changing Hash01 and\nMerkle Root. The same applies to changin the transaction order: swapping Tx0 with\nTx1 would change Hash0, Hash01, and Merkle Root [2].\n13","textTemplate":"","endCharIdx":1441,"metadataSeparator":"\n","type":"TEXT","hash":"KAhfZdx5NYtjBpa0tMUkgpA/qGAT1rc90zNslEE1eEQ="},"773036a7-1cab-48ed-93d9-2c4e49e6108f":{"id_":"773036a7-1cab-48ed-93d9-2c4e49e6108f","metadata":{"page_number":16,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"ac4a2bd8-25b6-442e-bb60-a2d6d0f87a14","metadata":{"page_number":16,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"W0TkIPWc8ft55jlN0uvTV0sKnmy294gvnjUISkJK6po="},"NEXT":{"nodeId":"19ecb413-2c7d-4fcc-9518-c9aab06f73ba","metadata":{},"hash":"dBS1f1EX0KnGeMUXeYnhXfiJ0HeatTJcuKLuLBixNvo="}},"text":"During block verification, nodes do not need to iterate through the entire set of\ntransactions.It is sufficient to compare Merkle Roots to find discrepancies.It also\nallows for verification that a specific transaction exists in a block without download-\ning all transactions, which is particularly valuable for devices with limited storage or\nbandwidth.The use of Merkle trees in blockchain represents an elegant application\nof a data structure first proposed by Ralph Merkle in 1979, now central to modern\ndistributed ledger technology [10].5.3 State Transitions\nFig.6 also illustrates the state transition function of a blockchain block.The Input\nstate shows Alice with $15 and Bob with $5 (among other balances).After transaction\nexecution within the block (specifically the transaction Tx0 where Alice sends Bob $10),\nthe Output state shows Alice with $5 and Bob with $15.Each transaction modifies\nthe global state according to specific rules, with the entire block representing a batch\nof state changes that are verified and agreed upon by the network [9].6 Replicated State Machine\nFigure 7: Block internals\nFig.7 shows two blocks (Block1 and Block2) connected in sequence, with the out-\nput state of Block1 (X3) serving as the input state for Block2.This sequential and\ndeterministic execution is one of blockchain features.Each transaction within a block is applied sequentially, and each block in the chain\nbuilds upon the final state of its predecessor.This creates a deterministic and verifiable\nhistory of all state transitions from the genesis (very first) block to the current state\n[9].The diagram captures the concept of blockchain as a replicated state machine.In\nformal computer science terms, a state machine consists of: 1.A set of states; 2.A set\nof inputs; 3.A state transition function that maps (state, input) pairs to new states; 4.An initial state.In blockchain systems, this translates to: 1.States represented by the\nglobal ledger state (e.g., account balances); 2.Inputs in the form of transactions; 3.State transition functions defined by the blockchain’s execution rules; 4.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"4ol4PIjLeYlHX7WZdsFjQ025OENb7ATbb93dY0d+kqs="},"19ecb413-2c7d-4fcc-9518-c9aab06f73ba":{"id_":"19ecb413-2c7d-4fcc-9518-c9aab06f73ba","metadata":{"page_number":16,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"ac4a2bd8-25b6-442e-bb60-a2d6d0f87a14","metadata":{"page_number":16,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"W0TkIPWc8ft55jlN0uvTV0sKnmy294gvnjUISkJK6po="},"PREVIOUS":{"nodeId":"773036a7-1cab-48ed-93d9-2c4e49e6108f","metadata":{"page_number":16,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"4ol4PIjLeYlHX7WZdsFjQ025OENb7ATbb93dY0d+kqs="}},"text":"State transition functions defined by the blockchain’s execution rules; 4.The genesis\nstate as the initial state.14","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"abBSD3BvTVClPv8TkjhoOBjX3ac2eLQHIogVZgfe25Q="},"ee0545d2-693e-4d1d-b244-69b7b55ef578":{"id_":"ee0545d2-693e-4d1d-b244-69b7b55ef578","metadata":{"page_number":17,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"6f3d0772-6466-48c5-aa99-b89ad3bf5689","metadata":{"page_number":17,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"UdXL+K4cck4zNo4sFNpTzrmwbUKanON3qV2nYoQapgM="}},"text":"The diagram shows how each transaction acts as an atomic state transition function.\nThe notation f(X0) = X1, f(X1) = X2, etc., emphasizes that transactions are functions\nthat transform one state into another in a deterministic manner. When all nodes in\nthe network apply the same transactions in the same order, they reach consensus on\nthe resulting state [14].\n7 Smart Contracts\nWith the evolution of the blockchain, it became obvious that the blockchain state\ncan persist not only balances of cryptocurrency, but any data representable in digital\nformat. This brings up the idea of smart contracts [5].\nReplicated State Machine nature establishes the foundation for understanding smart\ncontracts — programs stored on the blockchain. Smart contracts can be conceptual-\nized as user-defined state transition functions that operate within this state machine.\nMuch like finite automata, smart contracts take an input state, process it according to\npredefined rules, and produce an output state [6].\nThe concept of smart contracts was first proposed by computer scientist and cryp-\ntographer Nick Szabo in 1994, but it was not implemented until the invention of the\nEthereum protocol in 2014 by Vitalik Buterin and his team. Ethereum was the first\nblockchain platform to fully realize the potential of smart contracts, providing a Turing-\ncomplete [5] programming environment for their execution — Solidity [15].\n1 pragma solidity ˆ0.8.0;\n2\n3 contract SimpleStorage {\n4 uint256 private storedData ;\n5\n6 function set ( uint256 x ) public {\n7 storedData = x ;\n8 }\n9\n10 function get () public view returns ( uint256 ) {\n11 return storedData ;\n12 }\n13 }\nListing 1: Solidity example\nListing 1 is a simple example of a Solidity smart contract. This contract allows\nusers to store a single unsigned integer value within the blockchain state and retrieve\nit. The set function updates the stored value, while the get function returns the\ncurrent value.\n15","textTemplate":"","endCharIdx":1943,"metadataSeparator":"\n","type":"TEXT","hash":"CKwcf4S3pN0M8JPw9nY2FuApmQ9AVnzyJIwALswbhuQ="},"611172a8-e492-49ca-9442-20af2c15e0c6":{"id_":"611172a8-e492-49ca-9442-20af2c15e0c6","metadata":{"page_number":18,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"76f7864e-0873-44d9-90bd-a8875e317f2a","metadata":{"page_number":18,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"y4urVBeZ0yzMrauant2tKUQ/RwnNAd9mdAV5lwEkqFw="}},"text":"Smart contracts operate within the closed ecosystem of a blockchain, which creates\ncertain limitations on their functionality. For instance, they cannot generate true ran-\ndomness or directly access external data sources or APIs [16]. This isolation ensures\ndeterminism and security but requires the use of ”oracles” to bring external data into\nthe blockchain environment. Despite these constraints, smart contracts offer signif-\nicant programming capabilities. Due to Turing-completeness, anything that can be\nprogrammed with a traditional programming language can be also programmed in\nSolidity [17].\nSmart contracts enable the creation of decentralized applications (dApps) and fa-\ncilitate complex, multi-party agreements and protocols without the need for traditional\nlegal infrastructure [17]. Industries ranging from finance and insurance to healthcare\nand real estate have found valuable applications for smart contracts [18].\n16","textTemplate":"","endCharIdx":937,"metadataSeparator":"\n","type":"TEXT","hash":"Tl+dQjTR0sE3oawGUou69BUSl2YawXszLsnA8HEA1Sw="},"c1ba558f-308f-4951-9ede-647555e4d303":{"id_":"c1ba558f-308f-4951-9ede-647555e4d303","metadata":{"page_number":19,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a25dba68-6e01-424a-bceb-cdb9fd0558e1","metadata":{"page_number":19,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"H4GiE/pfCTuZmVZO64x7SVWs9TrkAKYp9D94qm0DM50="}},"text":"Part III\nArtificial Intelligence\n17","textTemplate":"","endCharIdx":35,"metadataSeparator":"\n","type":"TEXT","hash":"yzr9R5ibYqXrtqggtLd3JPvo6NhRSXL4gb3gvb1aHiI="},"14dc8ecf-c93a-471c-b923-4e56477c27b5":{"id_":"14dc8ecf-c93a-471c-b923-4e56477c27b5","metadata":{"page_number":20,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"c70009b4-5b47-4790-b32b-25d870c5061f","metadata":{"page_number":20,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"vBnTS6mQJyyKB4VagVRR71RR3zwb+aTebt0KtG/DNS8="},"NEXT":{"nodeId":"5274b7f0-b666-4dc4-9baf-078985c3ef77","metadata":{},"hash":"RQKTDaxp+d36LFj+L8oADJwZQTD7/q5CXZUYljKOlmE="}},"text":"Part IV\nAI-Blockchain Interaction\n8 Solutions\nEach of these patterns comes with trade-offs in complexity, trust, and performance.Oracles and TEE are widely used due to their relative simplicity, but they introduce\ntrust assumptions that must be managed.In practice, many current dApps use a hybrid\napproach: keep the blockchain for what it’s good at (immutability, consensus, simple\nlogic) and incapsulate AI tasks to off-chain infrastructure with as much verification as\npossible [19].8.1 Oracle\nOracles are the most common solution to connect AI services with smart contracts.An oracle is essentially a bridge that can fetch data or computations from the outside\nworld (off-chain) and deliver it to the blockchain (on-chain) [20].For AI integration,\nan AI oracle can query an AI model or an external AI API off-chain, then feed the\nresult into the blockchain transaction.This way, the heavy AI computation happens\noff the blockchain, but the outcome is passed into the smart contract securely.Oracles\ncan handle data requests (e.g.“What’s the prediction from this ML model?”) and\nreturn a result that the contract uses, all within one transaction lifecycle [19].We will\ndiscuss oracles in depth in the next section, but it’s worth noting here that advanced\noracle networks exist to decentralize this process (using multiple independent nodes\nto prevent having to trust a single source).For example, an oracle network might\nhave several nodes run the same AI computation and agree on the result, or provide\ncryptographic proofs of correctness [21].8.2 Trusted Execution Environment (TEE)\nAnother approach is leveraging secure hardware environments to run AI models off-\nchain in a verifiable way.A TEE (such as Intel SGX) can execute code in an isolated,\ntamper-resistant environment and produce an attestation (a cryptographic proof) of\nwhat code ran and what result was produced [19].In AI terms, one could run a neural\nnetwork inference inside a TEE; the smart contract would receive the result along\nwith a proof that, say, “This output comes from running model X on input Y inside\na genuine SGX enclave”.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"KsXORwOqkuJWqJbFq0xB6THNUtf3PDe+SAbQzeMWW+g="},"5274b7f0-b666-4dc4-9baf-078985c3ef77":{"id_":"5274b7f0-b666-4dc4-9baf-078985c3ef77","metadata":{"page_number":20,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"c70009b4-5b47-4790-b32b-25d870c5061f","metadata":{"page_number":20,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"vBnTS6mQJyyKB4VagVRR71RR3zwb+aTebt0KtG/DNS8="},"PREVIOUS":{"nodeId":"14dc8ecf-c93a-471c-b923-4e56477c27b5","metadata":{"page_number":20,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"KsXORwOqkuJWqJbFq0xB6THNUtf3PDe+SAbQzeMWW+g="}},"text":"This mitigates the need to trust the oracle operator – the\n18","textTemplate":"","startCharIdx":2124,"endCharIdx":2185,"metadataSeparator":"\n","type":"TEXT","hash":"5eSIWu0ld5qV71r5DIWXIoVQrVRERWTVRz0qmqj0lp4="},"1fa7d116-2d3d-45df-bef1-312664208f55":{"id_":"1fa7d116-2d3d-45df-bef1-312664208f55","metadata":{"page_number":21,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"df53c237-ac37-49ef-bb99-400c7bbabbc5","metadata":{"page_number":21,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"bsfwLFr8+Wee9nRJTtIdlsDnQVC1osBZN63i/CggadY="}},"text":"hardware itself ensures integrity.\nCentralized oracles like Provable utilize Trusted Execution Environments (TEEs)\nto enhance the security of data. The authenticity proof provided by Provable includes\nelements supported by hardware, namely TEEs, along with software and HTTP proto-\ncols. This proof aims to allow users to audit the data transmission process and verify\nits integrity, reducing the need to fully trust Provable [22].\nThe challenge here is that TEEs are hardware-dependent and not faultless (vulner-\nabilities in SGX have been found), but they offer a compelling way to get verifiable AI\ncomputations [19].\n8.3 Zero-knowledge Proofs (ZKP)\nInstead of performing AI on the main blockchain, another pattern is to use off-chain\ncompute frameworks that can handle heavy computation and then commit proofs or\nresults back to the main chain. An example is the concept of zero-knowledge proofs. A\nzero-knowledge proof can be briefly described as a cryptographic method that allows\none party (the prover) to demonstrate to another party (the verifier) that a certain\nstatement is true without revealing any information beyond the truth of the statement\nitself [22]. The on-chain contract can verify this proof quickly without redoing the\ncomputation, thus trusting the result without trusting the server itself. Although still\nan emerging technology, researchers have begun creating ZKP systems to prove neural\nnetwork inferences in a trustless way.\n9 Challenges\nDespite the promising potential, integration of AI with blockchain presents several\nsignificant technical and operational challenges.\n9.1 Closed Nature of Blockchain\nIntegrating AI into decentralized apps is technically and conceptually challenging. A\nprimary challenge is the closed nature of blockchains: smart contracts cannot directly\naccess external data or services, including AI models, due to their isolated execution\nenvironment [20]. All nodes must reach the same result for a given transaction, so\nany off-chain call or non-deterministic process could break consensus. This leads to\nissues of determinism – AI algorithms (especially complex machine learning models)\nmight produce slightly different results on different hardware or run into random varia-\n19","textTemplate":"","endCharIdx":2236,"metadataSeparator":"\n","type":"TEXT","hash":"JF0z0xSxYJ5EyTuwmT8TMrqVfr+EPSh5G9NYiMCp0+k="},"cbf3c58f-dc1f-473e-8dcc-ce17c9c142e8":{"id_":"cbf3c58f-dc1f-473e-8dcc-ce17c9c142e8","metadata":{"page_number":22,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"32e6c55c-03c6-4664-8ee4-2dfdbaac95ad","metadata":{"page_number":22,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"mM30P42aU66T0g2+j1/QFHKUGIU7EEZVc1T/MxtFSxI="}},"text":"tions, which is problematic for a blockchain where every node needs to verify the same\noutcome [23].\nImagine that the user trigger some AI-based execution from the smart contract.\nNow, the transaction is propagated to multiple blockchain nodes that process that\ntransaction. If every node had its own source of AI, all of them would have different\nresults, as AI models do not guarantee deterministic execution. Meaning, on one\nidentical input, they would return different outputs. Therefore, each blockchain node\nwould have a different transaction execution result and a different state, which would\neventually lead to the impossibility of consensus.\n9.2 Throughput and Latency\nA primary challenge is the limited transaction processing capacity of blockchain net-\nworks. AI applications typically require significantly higher throughput than what\ncurrent blockchain networks can provide. For example, the Ethereum blockchain net-\nwork can handle only about 12-15 transactions per second [17], which is insufficient\nfor many real-time AI applications generating high volumes of data [24]. Blockchain\ntransactions take time to confirm, so if a dApp needs an immediate AI computation\n(say, a user asks an AI a question), waiting for block confirmation can be slow for user\nexperience. However, there are some modern blockchain solutions that resolve this\nproblem by offering high transaction throughout at about 1200-1500 transactions per\nsecond [25].\n9.3 Resource Limitation\nAnother major challenge is resource limitation: on-chain execution is expensive and\nslow for computation-heavy AI tasks. Blockchains (like Ethereum) impose gas limits\nand fees that make training or even running large AI models on-chain infeasible [23]. AI\nworkloads often require extensive CPU/GPU time and large data sets, which contrasts\nwith the minimal compute and storage environment of smart contracts. Transactions\nin a block are charged byte-by-byte, making space a premium, and each transaction\nneeds verification by every node. In fact, attempts to directly deploy AI in smart\ncontracts quickly run into data storage and size limits – storing big models or datasets\non-chain is impractical due to cost and block size constraints [26].\n20","textTemplate":"","endCharIdx":2221,"metadataSeparator":"\n","type":"TEXT","hash":"C0Dj+XTufSzWSn2MpHH7Ft/5fCMUEA3NMUnVMtAPk6c="},"ee349cb6-d6af-4ea4-9852-0441b1311a9b":{"id_":"ee349cb6-d6af-4ea4-9852-0441b1311a9b","metadata":{"page_number":23,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a6de7ae4-0e7f-4889-b60a-c7b36bc87ea0","metadata":{"page_number":23,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"Vlxq+2GrZSvLjueeneVqp0LolIL3yBMFldC2kbyDnT4="},"NEXT":{"nodeId":"faf83569-a956-4ae4-9bc9-14d7a8711da2","metadata":{},"hash":"MhQT4Vts5MJeX+my21xZujTBm1qszaMPxywUF15ntjQ="}},"text":"9.4 Trust and Verification\nBeyond technical constraints, trust and verification are core concerns.If an AI system\nruns off-chain and feeds a result into a smart contract, how can we trust that result?This is often called the oracle problem in blockchain – the difficulty of trusting external\ndata feeds [19].An AI could be biased, manipulated, or simply output incorrect data;\nif a smart contract relies on it, there must be assurances of accuracy or honesty [27].Moreover, if a single AI service is used, it introduces a centralization risk: it could\nbecome a single point of failure or attack, undermining the decentralized nature of the\ndApp.10 Use Cases\nDevelopers are increasingly interested in bridging artificial intelligence (AI) with blockchains\nto make decentralized applications (dApps) and smart contracts more “intelligent” and\nresponsive to real-world conditions [24].Smart contracts on their own are determinis-\ntic, but many real-world applications need external data analysis or complex decision-\nmaking.By incorporating AI, smart contracts can autonomously analyze data and\nmake decisions [28].The integration of AI with blockchain technology presents numerous compelling\napplications across various domains.Use cases for AI blockchain include, but are not\nlimited to, those shown in Table 1.11 Oracles\nA blockchain oracle is fundamentally an agent that connects the sealed world of\nblockchains with external data and services.In simple terms, “oracles are third-party\nservices that provide smart contracts with external information, acting as bridges be-\ntween blockchains and the outside world” [19].They are not the original data source;\nrather, an oracle queries, verifies, and authenticates external data (which could be from\nan API, a website, a sensor, etc.) and then relays that information on-chain.They\ncan bring in real-world information to the blockchain—asset prices, weather data, or\nevent outcomes [22].This allows smart contracts to react to events and conditions that\nhappen off-chain.Without oracles, smart contracts would be extremely limited (they\ncould only use data already on the blockchain).","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"UkMrdbdTY6et7V2fM/ZuLtgjG79jnMD2DNmYe/h9pTI="},"faf83569-a956-4ae4-9bc9-14d7a8711da2":{"id_":"faf83569-a956-4ae4-9bc9-14d7a8711da2","metadata":{"page_number":23,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a6de7ae4-0e7f-4889-b60a-c7b36bc87ea0","metadata":{"page_number":23,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"Vlxq+2GrZSvLjueeneVqp0LolIL3yBMFldC2kbyDnT4="},"PREVIOUS":{"nodeId":"ee349cb6-d6af-4ea4-9852-0441b1311a9b","metadata":{"page_number":23,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"UkMrdbdTY6et7V2fM/ZuLtgjG79jnMD2DNmYe/h9pTI="}},"text":"Oracles can also relay information in\nthe opposite direction (outbound oracles), telling an external system when something\nhas happened on-chain.21","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"1jEuLlWKTkdvgW/LH1ZsVzXFyErY2Kdi90sgkaj4Vps="},"f58dda71-3d08-4943-a563-7e883b4aa634":{"id_":"f58dda71-3d08-4943-a563-7e883b4aa634","metadata":{"page_number":24,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"52ede3d6-f413-4bec-a61d-cea17ab48921","metadata":{"page_number":24,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"cKPaBELkg7mLiZYkIznnHIzC3T8TbnO4dpqXWHEBQ/k="}},"text":"Finance AI helps by quickly analyzing data to spot fraud, manage risks, and\neven guide investment decisions, while blockchain offers a secure,\ntransparent way to record every transaction. This combination makes\neveryday processes like verifying customer identities and preventing\nmoney laundering more efficient. It also powers new tools such as dig-\nital currencies and smart contracts, which can automatically adjust\ntheir terms based on market trends and enforce agreements without\nhuman intervention [29, 30].\nHealthcare In healthcare, combining AI and blockchain can transform service\ndelivery through more reliable processes. Blockchain stores health-\ncare data on-chain ensuring its integrity. For example, the history of\npatient’s prescriptions. And AI analyzes the medical data off-chain\nto create personalized report. Together, these technologies improve\nchronic disease management, fitness monitoring, and mental health\ncontrol [24].\nSupply\nChain\nThis integration enhances the integrity and coordination of informa-\ntion and processes, leading to faster and more cost-efficient product\ndeliveries. Blockchain offers an unchangeable record of every step\na product takes, ensuring transparency and accountability, while AI\ndigs into historical data to predict future demand and optimize logis-\ntics [28]. Together with IoT, these technologies automate workflows\nthrough smart contracts, making it easier to monitor goods in real\ntime and manage stock levels effectively [24].\nTable 1: Some AI-blockchain use cases\n22","textTemplate":"","endCharIdx":1525,"metadataSeparator":"\n","type":"TEXT","hash":"6P9GThNWGW6s7AG9MYB2uviasFvu9rlQKy/JAJMVoS4="},"11120de7-7be8-4bcd-9689-9d5c67787363":{"id_":"11120de7-7be8-4bcd-9689-9d5c67787363","metadata":{"page_number":25,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"7a04f4a6-693f-447d-a703-a37b2aa74084","metadata":{"page_number":25,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"LibDNUKDt/hUZ17Fk9h3Si5PMy1WWnCM5L8a8BE/8qE="}},"text":"Part V\nProblem Definition and Motivation\n12 Objectives\nThe development of both AI and blockchain technology lead to significant growth\nin decentralized AI applications. These dApps are seeking for ways to leverage AI\ncomputational power and flexibility alongside blockchain’s immutability, trust execu-\ntion, and ease of financial integration. In the last few months, over 30 projects have\nlaunched their AI–based dApps [1]. Some projects, e.g., [GAIA.a](http://GAIA.ao)i [2]\nor Freysa [3], leverage AI to make on-chain (using blockchain settlement) games where\nusers interact with AI models using blockchain transactions. Others, e.g., Zerebro [4],\ntake advantage of the AI creative and intelligent capabilities to turn it into a digital\npersona who runs a successful X (ex. Twitter) account (over 120.000 subscribers at\nthe time of writing) [5] or produces music [6]. Furthermore, some teams help create\nframeworks for facilitating emergence of AI–blockchain, for instance ElizaOS [7].\nHowever, AI-generated outputs remain largely unverifiable within blockchain projects,\nposing critical security and reliability challenges. Unlike blockchain, which operates\ndeterministically, AI models introduce probabilistic and non-deterministic behavior,\nmaking their integration with smart contracts problematic. Products frequently rely\non unverified middle-man solutions or centralized software and black boxes. This thesis\nintroduces **Verifiable AI Oracles**, a framework designed to ensure the authenticity\nand verifiability of AI-generated responses when used in decentralized applications.\n13 Thesis Structure\n23","textTemplate":"","endCharIdx":1611,"metadataSeparator":"\n","type":"TEXT","hash":"JAoZUl5ZOT9wS4G2m+kfzjcg1uBHCC7A5BgnpRgtqGM="},"f553048a-4793-4eec-b6e1-e0f23ec9c8ab":{"id_":"f553048a-4793-4eec-b6e1-e0f23ec9c8ab","metadata":{"page_number":26,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"e3a3ecda-7ad8-4a9d-9fff-413bc9db1cbf","metadata":{"page_number":26,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"HjQbh1MumDy8B/TSu3Pq53h5WSyd1cJv2zwCI6WtEIM="}},"text":"Part VI\nMethodology\n14 Use Case\nThe core objective of this thesis is to demonstrate a verifiable end-to-end integration\nbetween a centralized AI system (serving as a non-deterministic source of outcomes)\nand a deterministic, trust-minimized blockchain environment. To accomplish this, the\nthesis design a simple but illustrative AI-driven blockchain game that highlights how to\nreliably bridge data between an on-chain smart contract and an off-chain AI provider,\nwhile preserving verifiability at every step.\n14.1 Game Concept and Motivation\nThe game is centered around players attempting to “convince” an AI model to return\na specific number in their favor. Each player places a bet (in cryptocurrency) and then\nsends a prompt to the AI model requesting a particular integer—say, the number 5. If\nthe AI outputs that exact number, the player wins the pot; otherwise, the player loses.\nThere is also a fallback chance-based mechanism, so even if the AI fails to generate the\nrequested number, the user might still succeed with some probability based on random\nselection.\nThis mechanic—simple at first glance—serves a crucial demonstration purpose:\n• It showcases how to structure interactions in which on-chain contracts must rely\non an external AI service for non-deterministic data (the AI output).\n• It highlights the necessity for verifiable oracles to ensure transparency and au-\nditability of the entire data flow (from the blockchain to the AI provider and\nback).\n• It provides an example of how to mitigate the “oracle problem”—the challenge\nof ensuring that an off-chain process (AI inference) has not been maliciously\nintercepted or tampered with before arriving back on-chain.\n14.2 Overall Flow and Rationale\nThe following steps illustrate how the user interacts with the game and how the veri-\nfiable AI oracle guarantees trustworthy AI-blockchain communication:\n24","textTemplate":"","endCharIdx":1878,"metadataSeparator":"\n","type":"TEXT","hash":"85HeP2xbK/jIskYc4lX64XBRfJUFL2tSjnKm/fqGBGk="},"d075b699-2a43-47ae-891e-8ee5875fe3d8":{"id_":"d075b699-2a43-47ae-891e-8ee5875fe3d8","metadata":{"page_number":27,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"dac7757a-46fa-4404-950b-29cc4a0da9f1","metadata":{"page_number":27,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"jVt/8tpo5ML7P41FYZ3cvxZafK3QuJSfKvJJjFECRlw="}},"text":"1. Bet Placement and Prompt Submission: The player locks their funds (a\nbet) into a smart contract and submits the AI prompt (e.g., “Please return the\nnumber 5”).\n2. Game Initialization: A new game session is created on-chain, generating a\nunique GameID. This ID will be used to correlate every on-chain and off-chain\naction. GameID is tied to the user’s submission: prompt and bet.\n3. Oracle Request to the AI Model: The on-chain oracle service picks up the\nprompt and forwards it—along with the GameID—to the off-chain AI provider.\nThis step is logged on-chain to ensure traceability.\n4. AI Response and Verification:\n• The AI model processes the prompt in a separate context and persists the\nresult on its server to enable further cross-validation. The persisted result\nshould contain GameID.\n• The AI returns a numerical result to the off-chain oracle (e.g., “7” or “5”).\n• The oracle service attaches evidence (proof of origin—GameID) ensuring\nthe AI’s output has not been modified in transit.\n• The verified response is posted back on-chain, tying the result directly to\nthe same GameID.\n• Furthermore, the response along with GameID and the data needed to\ntrace the result are saved in a local oracle database.\n5. Outcome Determination: The smart contract receives the final response from\nthe oracle. Now, the user might trigger the verification mechanism.\n6. Rewards and Settlement: After the user receives the notification that the\nresult is ready, they can trigger a settlement. During the settlement, the result is\nchecked for hallucinations and relativity to the schema. In our case, the schema is\nsimple—just a single integer. If the result matches the user’s requested number,\nthe user wins. The smart contract either pays out the winnings or withholds the\nbet based on the AI output. All events—prompt submission, AI response, proof\nof veracity, and final settlement—are stored immutably on-chain.\n14.3 Purpose and Benefits of the Use Case\nWhile the game itself may appear whimsical, it serves multiple technical and educa-\ntional objectives:\n25","textTemplate":"","endCharIdx":2060,"metadataSeparator":"\n","type":"TEXT","hash":"VDqtorW0M6GYsOdBOS4tkmmoQBK53eetxbT0arNE6qs="},"27c1506c-9639-4d54-b108-11cdf897c533":{"id_":"27c1506c-9639-4d54-b108-11cdf897c533","metadata":{"page_number":28,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"b867bc28-7ad3-4277-a562-476b97196298","metadata":{"page_number":28,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"hOnm7cyHw3nC3rB0E8qElRIlZ0hm33lVYxC4LbrYzZg="}},"text":"• Verifiability in Action: By deliberately involving a “trusted but centralized\nAI” as the data source, the system forces the use of proofs and on-chain ver-\nification steps. This exhibits how fraud proofs or transparency logs can catch\ntampering or misrouting of data.\n• Template for AI–Blockchain dApps: The demonstrated architecture—featuring\na specialized oracle, a queue mechanism for unprocessed AI prompts, and verifi-\ncation upon return—can be generalized to more sophisticated dApps that require\nexternal AI computations.\n• Fraud Risk Demonstration: The game setup naturally underscores how any\nthird party bridging the AI response could maliciously alter or censor it. Showing\nhow the user (or any auditor) can check the entire path using the GameID and\nreceipts exemplifies protection.\n• User Experience and Trust: The flow is deliberately kept simple (bet, prompt,\npayment, result) to spotlight the user’s ability to track each step—enhancing trust\nthat the final outcome is truly determined by the AI’s unaltered response.\nIn summary, the use case aims to prove the main architectural patterns required\nfor bridging blockchain-based smart contracts and potentially unreliable external AI\nservices. Furthermore, it might rely on centralized oracle while remaining transparent.\n15 Requirements\nThis section details all the core requirements—both functional and non-functional—that\nthe system must satisfy to reliably bridge a centralized AI model. These requirements\nwill heavily influence architectural decisions and the choice of specific tooling for each\nlayer (frontend, smart contracts, off-chain oracle, AI provider, etc.).\n15.1 Functional Requirements\n1. AI Interaction:\n• The system must send user prompts from on-chain to an external AI provider.\n• The AI provider must respond with a numeric or textual output (e.g., a\nguessed number).\n• Each interaction must be uniquely identifiable (via a Game ID or equiva-\nlent).\n26","textTemplate":"","endCharIdx":1941,"metadataSeparator":"\n","type":"TEXT","hash":"GRlfEr4R1g/ks9GMOT/69kVSgx1AyhmOZV4V4NNIWls="},"8be73e63-ae86-4bd8-9d90-e766f8603de2":{"id_":"8be73e63-ae86-4bd8-9d90-e766f8603de2","metadata":{"page_number":29,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"9b2390c2-3e6a-4d1b-a733-3e4a31eb7211","metadata":{"page_number":29,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"jYRpBJQKA2YR/cvTaU2Pn5A19Bk3f0cbDVUTpsC9+lM="}},"text":"2. On-chain Queue of Prompts:\n• The system must maintain a queue (or list) of pending AI queries in a smart\ncontract. This is essential for reliable off-chain event handling. Otherwise,\nthe responsibility of maintaining the queue falls to the oracle, which might\nturn out to be unreliable or fault intolerant.\n• Each prompt in this queue must be uniquely tagged to allow retrieval by\nthe oracle service.\n• The oracle must be able to retrieve unprocessed prompts.\n• The oracle must be able to submit back the processed prompt, consequently\nremoving it from the queue.\n3. Off-chain Oracle Bridge:\n• An off-chain oracle must monitor the on-chain queue of prompts, retrieve\nthem, forward them to the AI provider, and then post the result back on-\nchain.\n• The oracle must incorporate a verifiable proof that ensures the AI output\nwas not tampered with. In the current implementation, it means storing\nand submitting relevant GameID.\n• The oracle must store the processed information and save it to some persis-\ntent storage. Furthermore, the oracle must expose this storage publicly to\nmake the information publicly verifiable.\n4. Session Persistence at the AI Provider:\n• The AI provider must store ongoing conversations or prompts so that the\nsame session can be referenced later for cross-verification or replay attacks.\n• The provider must expose an API (or other interface) to retrieve previously\nsent prompts and returned responses, keyed by session ID or user ID. The\nchat must have unique identifier and must be retrievable any time after\nbeing created.\n5. Verification and Fraud-Proof Mechanism:\n• The user (or any third party) must be able to request evidence from the\noff-chain oracle and/or AI provider to verify that the final AI output posted\non-chain matches the original AI response by comparing the stored results\nagainst GameID.\n• Smart contracts must offer a function or event log that can be inspected to\nprove the AI response was consistent with the user’s request.\n27","textTemplate":"","endCharIdx":1985,"metadataSeparator":"\n","type":"TEXT","hash":"OaRsdvvNQAXt3rRdKwbT+F7zdqXFG2Q6w32OfqVcDjc="},"17d53bd0-c584-4421-80ed-e0501179cfe0":{"id_":"17d53bd0-c584-4421-80ed-e0501179cfe0","metadata":{"page_number":30,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"97637ffa-0766-409d-94b6-5e616fb3a282","metadata":{"page_number":30,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"MDCrEJDkDPJnHgYgYwf7/TGx+zablHBNhVYyTBkUw6c="}},"text":"6. Game Logic on Smart Contracts:\n• The system must enforce rules for wagers, prompt verification, and outcome\nsettlement entirely on-chain.\n7. Player Onboarding and Fund Management:\n• A user must be able to enter the game by depositing a predefined bet into\nthe contract.\n• All game-related funds must be escrowed in the smart contract until the\nround is complete.\n• The user’s deposit is either partially or fully refunded (or forfeited) based\non the final AI outcome and any fallback results.\n• If AI hallucinated or returned the result not due the schema, perform a\nrefind of user’s funds.\n8. Tracing and Auditability:\n• The system must maintain an audit trail of all game rounds, prompts, AI\noutputs, and final outcomes, visible on the blockchain.\n• The system must expose all the prompt results: aggregate and show them\npublicly.\n15.2 Non-Functional Requirements\n1. Security and Trustworthiness:\n• The oracle service must employ cryptographic measures to prove that the\ndata has not been intercepted or modified en route. Typically, this is ensured\nusing the ”ownership” mechanism in smart contracts.\n• Collusion or tampering by the oracle or AI provider must be detectable by\nusers or external auditors (through dispute resolution mechanism).\n• The smart contract must limit any single point of failure (e.g., unauthorized\nupdates or owner privileges) to maintain a trust-minimized design.\n2. Scalability:\n• The oracle must handle increasing numbers of user prompts with minimal\nperformance degradation.\n• The architecture should allow for additional oracles or bridging services to\nbe added if transaction load grows significantly.\n28","textTemplate":"","endCharIdx":1642,"metadataSeparator":"\n","type":"TEXT","hash":"D7b64ZnHY08UUSlwt4hUA+jOQPxHHsjf8aeUrLIBaRc="},"e5ec7cc3-1c9e-4ed9-b3c1-e04756ba2af3":{"id_":"e5ec7cc3-1c9e-4ed9-b3c1-e04756ba2af3","metadata":{"page_number":31,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"4ac0f81a-b789-47e2-8878-2bf9b779c9fb","metadata":{"page_number":31,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"9dnV0weytre8Ec6qyV5MFl5CDDDxUfyq6QwuheFz+4Q="}},"text":"• The prompt queue must have mechanism to prevent DoS attacks.\n3. Performance and Latency:\n• While some latency is inevitable (due to an external AI call), the system\nshould minimize turnaround time from on-chain request to AI response, so\nplayers do not wait excessively for their result.\n• The oracle layer should process new prompt submissions within 10-20 sec-\nonds, under typical network conditions.\n4. Data Persistence:\n• AI logs must be persisted in a retrievable format by the AI provider, ensuring\nthat historical queries can be cross-checked.\n• The on-chain contract must record essential game-state data indefinitely\n(subject to normal blockchain immutability).\n5. Privacy and Confidentiality:\n• Users’ prompts, if sensitive, should be encrypted at rest or shared only via\nsecure channels. Additionally, it boosts the game fairness: if someone finds\nthe ”magic” prompt to convince the AI, other players won’t be able to steal\nit.\n• The minimal necessary data should be posted on-chain to achieve the game\nlogic (no personal data or secrets leakage).\n6. Maintainability and Extensibility:\n• The design should allow easy integration with alternative AI providers. If\nthe chosen AI system changes or if we move to a different generative model,\nthe oracle layer and the contract logic should require minimal changes.\n• The off-chain oracle component should be modular—individual adapters or\ndrivers for different AI endpoints or hosting providers can be swapped in or\nout.\n7. Regulatory Compliance:\n• Any local or international regulations surrounding gambling, user data han-\ndling, or consumer protection may require additional compliance efforts\n(e.g., KYC or disclaimers).\n• The architecture must be flexible enough to incorporate these compliance\nchecks if needed.\n29","textTemplate":"","endCharIdx":1779,"metadataSeparator":"\n","type":"TEXT","hash":"20JHZ2vqqmO0vmQbufXSej49qGJUtkLM6myB57lsURE="},"6da2eaab-9afa-4682-a4e4-070b903410af":{"id_":"6da2eaab-9afa-4682-a4e4-070b903410af","metadata":{"page_number":32,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"8bcad1c3-d2eb-46e1-95df-f4b8521e19b1","metadata":{"page_number":32,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"PguLscOshrYbeUkUSMu5q8wDG78VNk/e0Ze7NXpRPg4="}},"text":"15.3 Additional Constraints and Considerations\n1. Fraud-Proof Submission and Dispute Resolution:\n• A user (or external entity) must have a method to submit “fraud proofs” if\nthey detect an inconsistency between the AI’s actual output and what the\noracle reports on-chain.\n• The system should define how to handle disputes (e.g., by freezing the pot,\ntriggering a re-run of the AI call, or awarding a settlement if malicious\nactivity is proven).\n2. Fallback Mechanism for Oracle or AI Unavailability:\n• Should the AI provider fail or the oracle become unresponsive for an ex-\ntended period, the contract must implement a default or timeout logic to\nsettle user funds gracefully.\n16 Architecture\n16.1 High-Level Overview\nThe system is composed of four main components (Frontend, Smart Contracts, Oracle,\nand Statistics Service), each operating semi-independently and communicating via well-\ndefined interfaces. The goal is to seamlessly integrate a centralized, non-deterministic\nAI service with deterministic blockchain logic, while ensuring verifiability at each step.\nBelow is a textual summary of how these parts fit together, complemented by the\nattached sequence diagrams (PlantUML) and internal Oracle diagram (DrawIO).\n1. Frontend\nThe frontend is built in TypeScript, React, and Next.js (with Tailwind CSS) and\ndeployed via Vercel. Its primary roles are:\n• Game Interface: A page where users can place bets, view their balances, see\ngame history, and resolve bets once the AI result is returned.\n• Verification Interface: A secondary page displaying all associated metadata\n— OpenAI’s thread ID, assistant ID, message IDs, and the on-chain GameID\n— for any given prompt.\n• Integration with Smart Contracts: Uses ethers.js to call the AIGambling\ncontract for placing and resolving bets, retrieving bet details, and managing\nuser balances.\n30","textTemplate":"","endCharIdx":1846,"metadataSeparator":"\n","type":"TEXT","hash":"opV7AxN1S6OvZtPiOkEa0/FHYGO2g11zdDpUulMlNtI="},"65ce113a-e915-4e41-899d-ca98790a7670":{"id_":"65ce113a-e915-4e41-899d-ca98790a7670","metadata":{"page_number":33,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"ef94a6e7-219d-444d-a36c-b89099611a9d","metadata":{"page_number":33,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"FSYvaOx3ZTD3WrQldAl4qjvYVZ2aCHiO3Zdks+HtcFQ="}},"text":"• AI Verification View: Allows the user to cross-check the game’s ID and the\nAI’s conversation thread ID stored by OpenAI for additional verifiability.\n2. Smart Contracts\nWritten in Solidity and organized as four contracts. The project uses Hardhat\nfor compilation, testing, and deployment, with helper scripts in JavaScript:\n• EventManager\n– Manages a stateful queue of “events” (here, AI prompts).\n– Provides methods to enqueue a new event and later fetch or remove it.\n• AIOracle (inherits from Ownable and EventManager)\n– Represents the on-chain component that the off-chain Oracle service\n“owns.”\n– The Oracle can submit processed AI prompts (events) back on-chain,\nthen remove them from the queue.\n• House (inherits from OwnableUpgradeable)\n– Generic “casino house” logic for deposit, withdrawal, balance manage-\nment, and fee structures.\n– Holds key parameters such as minBetAmount, maxBetAmountPercentage,\nhouseFeePercentage, etc.\n– Designed to be reusable by multiple “game” contracts needing standard-\nized fund management.\n• AIGambling (inherits from House)\n– Actual game logic: storing and tracking all bets, letting users place\nwagers, resolving outcomes once the AI result is back, and recording\nthe entire game state on-chain.\n– The frontend primarily interacts with this contract to get user bet info\nand finalize results.\n3. Off-Chain Oracle\n• Core Bridge: A Golang-based CLI application that monitors the EventManager\nqueue in the AIOracle contract. When it finds a new prompt event:\n(a) It calls OpenAI’s persistent conversation API to fetch or send a prompt\nunder a unique thread ID.\n(b) Receives the AI’s response and saves it locally in LevelDB.\n(c) Submits the AI’s response back to the AIOracle contract (on the same\nevent ID), effectively bridging blockchain and AI.\n31","textTemplate":"","endCharIdx":1794,"metadataSeparator":"\n","type":"TEXT","hash":"dAgzTLl0Gc8/fsQqAkjXWUyJ5haef4sLKesF9NdQbxc="},"1345e37f-bfda-49d0-9e03-4991b7f2a7b4":{"id_":"1345e37f-bfda-49d0-9e03-4991b7f2a7b4","metadata":{"page_number":34,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"775b6e84-ee59-48a3-ae77-3ab42060c340","metadata":{"page_number":34,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"bqwF4h+4PpnbkrZ0bEil+1wzyPVvTncEcOPWHqYiUbY="}},"text":"• Configuration & Reusability:\n– The Oracle logic is modular: the code can be directed to any AI provider\nor any Ethereum-compatible chain by simply changing the config.\n– HTTP endpoints let external systems (e.g., a user or dispute process)\nrequest the stored AI output or the proof that it matches what was\nsubmitted on-chain.\n4. Statistics Gathering Service\n• Another Golang-based application, mostly optional but valuable for observ-\nability.\n• Listens to events emitted from the House and AIGambling contracts (e.g.,\nbet placed, bet resolved) and stores them in a database.\n• Useful for advanced analytics, dashboards, or historical queries about the\ngame’s performance.\n16.2 Sequence Diagram\nFig. 8 showcases the system sequence diagram.\n1. User Places Bet. Via the frontend, the user deposits funds (transacted on-\nchain) through the AIGambling contract. The user also posts a new AI prompt\nevent, stored in EventManager.\n2. Oracle Fetch. The off-chain Oracle detects this newly added event, calls Ope-\nnAI’s API with the given prompt and session ID. The AI’s response is retrieved,\noptionally augmented with cryptographic or trust metadata, and stored in Ora-\ncle’s LevelDB for local retrieval.\n3. On-Chain Update. The Oracle calls AIOracle.submitProcessedPrompt()\nwith the original event ID and the final AI response. AIOracle triggers the\nremoval of that event from the queue, marking it as “processed.”\n4. Game Resolution. The AIGambling contract updates the bet’s status accord-\ning to the AI response. If the requested number was matched, the user wins.\nOtherwise, a fallback random logic might determine the final payout. All of this\nis immutably logged in the contract’s event logs.\n5. Verification. Users can view the entire game log on the blockchain. They can\nalso open the verification page to see the unique AI thread ID. By visiting the\nOracle’s endpoint (or OpenAI’s retrieval API if authorized), they confirm that\nthe AI model truly responded with the stated output.\n32","textTemplate":"","endCharIdx":1992,"metadataSeparator":"\n","type":"TEXT","hash":"v+ikHDhm5nLwLLeN8aYwGE54y9ajdWZTkX0VZiOuMp0="},"7d3b3944-f3ee-4c1c-8a11-71374d3a8c96":{"id_":"7d3b3944-f3ee-4c1c-8a11-71374d3a8c96","metadata":{"page_number":35,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"6fdc6f49-facf-47f5-9b61-4a2096505bba","metadata":{"page_number":35,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"VJlIABONuXxEzV85F4pq+nbWmslA+hjACxNB9M0XWq0="}},"text":"17 Tools\n1. OpenAI for Persistent AI Threads\n• Reasoning: Needed a provider supporting “conversation threads” with per-\nsistent state. This makes cross-verification possible, because we can link a\nGameID in our metadata.\n• Alternatives Considered: Anthropic (Sonnet), X.AI (Grok), Google (Gem-\nini). None offered as robust or easily accessible a thread-based system for\nverifying historical chats.\n• Future Outlook: Might eventually run a local model for cost or customiza-\ntion reasons, but that is heavier in infrastructure.\n2. Vercel AI for Frontend Scaffolding\n• Reasoning: Wanted to try advanced prompt engineering and iterative de-\nsign approaches. It bootstrapped the Next.js + React + Tailwind code\nstructure quickly.\n• Trade-offs: The initial output required debugging and “human” correc-\ntions, but it significantly shortened the initial setup phase.\n3. Smart Contracts in Solidity\n• Reasoning: A standard, community-adopted language for Ethereum-compatible\nchains, including Dymension RollApps. OpenZeppelin libraries were used\nfor secure contract ownership, role management, and upgradeability.\n• Alternatives Considered: CosmWasm for the broader Cosmos ecosystem,\nMove (on Sui/Aptos), or Rust (on Solana). Each is less prevalent in the\ngaming use-case we focus on.\n4. Hardhat, Ethers.js, and TypeScript\n• Reasoning: Hardhat is widely used for Solidity development with a robust\nplugin ecosystem. Ethers.js integrates well for contract calls in TypeScript-\nbased test suites.\n• Benefits: Type safety, well-known workflows, and good developer experi-\nence.\n5. Golang for Oracle and Stats Services\n• Reasoning: Go offers straightforward concurrency primitives, is easy to\ndistribute as a single binary, and has mature libraries for interacting with\nEthereum and building HTTP servers.\n33","textTemplate":"","endCharIdx":1797,"metadataSeparator":"\n","type":"TEXT","hash":"ykyp2WS8GCQOJqtwqdl+lUWrDdiRrRJSncsJ6wCiCtY="},"07f1efe9-1180-4497-b881-390c6be0c8c5":{"id_":"07f1efe9-1180-4497-b881-390c6be0c8c5","metadata":{"page_number":36,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"3bab636d-304e-431d-ac6f-5c97bf6a1dc1","metadata":{"page_number":36,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"9tZZfS2PjZhyapJLkfCD9KKVWs6qCbCsl8o3L2yQdUk="}},"text":"• Implementation Details:\n– Oracle CLI uses go-ethereum’s libraries to watch for “PromptAdded”\nevents on EventManager and triggers OpenAI’s API calls.\n– Persists responses in LevelDB for fast local retrieval.\n– Exposes a minimal HTTP server for on-demand result retrieval or cross-\nverification.\n– Stats service also uses Go to subscribe to contract events and store them\nin a chosen DB (SQL or NoSQL).\n6. OpenZeppelin Upgrades and Libraries\n• Reasoning: Leverages established, audited implementations for Ownable,\nUpgradeable, and general ERC standard contracts.\n• Advantages: Minimizes risk in ownership logic, while enabling iterative\nimprovements without redeploying a completely new contract.\n7. DrawIO and PlantUML\n• Reasoning:\n– PlantUML sequence diagrams to capture the request-response flow among\nall services (Frontend, Contract, Oracle, AI).\n– DrawIO for internal block/architecture diagrams of the Oracle.\n• Outcome: Clear, high-level documentation that can be shared with new\ncontributors or stakeholders.\nSummary. This curated tooling set addresses our main goals:\n• Verifiable bridging between on-chain and AI providers (Solidity + Golang).\n• Persistent conversation logs for cross-checking (OpenAI + custom Golang).\n• User-friendly UI (Next.js + React + Tailwind).\n• Maintainability and upgradability (OpenZeppelin + Hardhat).\nWith these technologies and design choices, the system can reliably demonstrate a\nworkable AI-driven gambling game while also illustrating the generalizable blueprint\nof a “verifiable AI oracle” for any potential Web3 dApp.\n34","textTemplate":"","endCharIdx":1569,"metadataSeparator":"\n","type":"TEXT","hash":"w0IidHcCAYfTUvPBdiIm6Br0Ffi/7tYeCQR0MNDsg4w="},"c1a5009a-4954-42ad-a17d-044ceec5935a":{"id_":"c1a5009a-4954-42ad-a17d-044ceec5935a","metadata":{"page_number":37,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"1de7c423-8475-4bcc-85bd-e7d4fd028418","metadata":{"page_number":37,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"fNDqHvnB7aKBpASNMlyfNNqE4OIXp/WzBcQLqNHvOvc="}},"text":"18 Development\n19 Deployment\n20 Testing\n35","textTemplate":"","endCharIdx":42,"metadataSeparator":"\n","type":"TEXT","hash":"7bZ97FG5U1veyR8vMp6kPqkbsLkOTCMzx0ubiuNShTY="},"a66d285e-fb4c-44d5-bdc1-fcd78e05b40f":{"id_":"a66d285e-fb4c-44d5-bdc1-fcd78e05b40f","metadata":{"page_number":38,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"34278e72-6d21-4bd0-b87d-dca84fa94e72","metadata":{"page_number":38,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"Cq+T7APzaH54prQ3ppsyN/R8JVvGOE1rfAj7qqM3H4M="}},"text":"Figure 8: System sequence diagram\n36","textTemplate":"","endCharIdx":36,"metadataSeparator":"\n","type":"TEXT","hash":"cfj2Ev9Jujmtow68TlC3VNIE6BJX5xK1BOMoHr1hHTc="},"6b38ace0-94f3-4ad2-8b16-5cb6abd85a46":{"id_":"6b38ace0-94f3-4ad2-8b16-5cb6abd85a46","metadata":{"page_number":39,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"d1b69291-7c44-414c-ae23-e151417b420c","metadata":{"page_number":39,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"dkAdziZMteqhloxKcgWe+/DooaW9xRkKgor4hQ/Tiaw="}},"text":"Part VII\nConclusion\n20.1 Runtime metrics Performance Analysis\n20.2 Statistics Gathering Feedback\n20.3 Security Considerations\n20.4 Further Development\n37","textTemplate":"","endCharIdx":153,"metadataSeparator":"\n","type":"TEXT","hash":"2H3UcaGPeX+BnGKSlkn3MxynPY9hCGSmKyFGHum2+aU="},"9f62dd89-d134-4bcb-b3d6-dc41d06648d2":{"id_":"9f62dd89-d134-4bcb-b3d6-dc41d06648d2","metadata":{"page_number":40,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"69bf7387-208d-4042-904b-c96442ca21c4","metadata":{"page_number":40,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"jXsqF0getEsf9sBorEYTaSC971Z4bHm0MiN3DN/gLWI="},"NEXT":{"nodeId":"9f211fbe-be98-435e-9ada-31b3da98c3f0","metadata":{},"hash":"RLfE2HquLU+BrNvlDc48Fp+SY/7TkeYanJfrYb7DRQM="}},"text":"References\n[1] Arvind Narayanan and Jeremy Clark.“Bitcoin’s Academic Pedigree: The concept\nof cryptocurrencies is built from forgotten ideas in research literature.”In: Queue\n15.4 (Aug.2017), pp.20–49.issn: 1542-7730.doi: 10.1145/3134434.3136559.url: https://doi.org/10.1145/3134434.3136559.\n[2] Satoshi Nakamoto.Bitcoin: A Peer-to-Peer Electronic Cash System.Available at\nhttps://bitcoin.org/bitcoin.pdf. 2008.[3] Dr.Manita arora Megha Choudhary.“Risk and benefits associated with digital\nmoney transferring technology”.In: IJNRD - INTERNATIONAL JOURNAL\nOF NOVEL RESEARCH AND DEVELOPMENT 9.5 (2024), pp.834–855.issn:\n2456-4184.url: https://www.ijnrd.org/papers/IJNRD2405288.pdf.\n[4] Muniba Memon et al.“Blockchain Beyond Bitcoin: Blockchain Technology Chal-\nlenges and Real-World Applications”.In: 2018 International Conference on Com-\nputing, Electronics Communications Engineering (iCCECE).2018, pp.29–34.doi: 10.1109/iCCECOME.2018.8658518.[5] Vitalik Buterin.Ethereum: A Next-Generation Smart Contract and Decentral-\nized Application Platform.Available at https : / / ethereum .org / content /\nwhitepaper/whitepaper- pdf/Ethereum_Whitepaper_- _Buterin_2014.pdf.2014.[6] Nick Szabo.“Formalizing and Securing Relationships on Public Networks”.In:\nFirst Monday 2.9 (Sept.1997).doi: 10 .5210 / fm .v2i9 .548.url: https :\n//firstmonday.org/ojs/index.php/fm/article/view/548.[7] Christian Decker and Roger Wattenhofer.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"vxSPutvR+sFpCWLIhfv3x6YDGA8ynFjmAILUZuJK7sM="},"9f211fbe-be98-435e-9ada-31b3da98c3f0":{"id_":"9f211fbe-be98-435e-9ada-31b3da98c3f0","metadata":{"page_number":40,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"69bf7387-208d-4042-904b-c96442ca21c4","metadata":{"page_number":40,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"jXsqF0getEsf9sBorEYTaSC971Z4bHm0MiN3DN/gLWI="},"PREVIOUS":{"nodeId":"9f62dd89-d134-4bcb-b3d6-dc41d06648d2","metadata":{"page_number":40,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"vxSPutvR+sFpCWLIhfv3x6YDGA8ynFjmAILUZuJK7sM="}},"text":"[7] Christian Decker and Roger Wattenhofer.“Information propagation in the Bit-\ncoin network”.In: IEEE P2P 2013 Proceedings.2013, pp.1–10.doi: 10.1109/\nP2P.2013.6688704.[8] Suyash Gupta and Mohammad Sadoghi.Blockchain Transaction Processing.July\n2021.doi: 10.48550/arXiv.2107.11592.[9] Gavin Wood et al.“Ethereum: A secure decentralised generalised transaction\nledger”.In: Ethereum project yellow paper 151.2014 (2014), pp.1–32.[10] Andreas M.Antonopoulos.“Mastering Bitcoin: Unlocking Digital Crypto-Currencies”.In: 2014.url: https://api.semanticscholar.org/CorpusID:115315482.\n[11] Leslie Lamport, Robert Shostak, and Marshall Pease.“The Byzantine Generals\nProblem”.In: ACM Trans.Program.Lang.Syst.4.3 (July 1982), pp.382–401.issn: 0164-0925.doi: 10.1145/357172.357176.url: https://doi.org/10.\n1145/357172.357176.38","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"PGcgtURuSu78jFatkIyBltIWAsjhwPkFY+DhHUatzKU="},"071cd363-c07b-439e-b892-8ed8450c3d21":{"id_":"071cd363-c07b-439e-b892-8ed8450c3d21","metadata":{"page_number":41,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"f49c5420-3b53-432a-8b35-bfc187439ad9","metadata":{"page_number":41,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"bsxYVIyL/p9w3hu+Ym3YnrHWbtTPgwlXJuH3JLYyODY="},"NEXT":{"nodeId":"b34f7508-c758-47d7-a77f-4f0ea6e38c3a","metadata":{},"hash":"G38FgyzOp5BoX+mxKS96LYJkLmJYakkfThsXjDGT15Q="}},"text":"[12] Zibin Zheng et al.“An Overview of Blockchain Technology: Architecture, Consen-\nsus, and Future Trends”.In: 2017 IEEE International Congress on Big Data (Big-\nData Congress).2017, pp.557–564.doi: 10.1109/BigDataCongress.2017.85.[13] Ralph Merkle.“A Digital Signature Based on a Conventional Encryption Func-\ntion”.In: vol.293.Aug.1987, pp.369–378.isbn: 978-3-540-18796-7.doi: 10.1007/3-540-48184-2_32.[14] Arvind Narayanan et al.Bitcoin and cryptocurrency technologies: a comprehen-\nsive introduction.Princeton University Press, 2016.[15] Solidity Documentation.Available at https://docs.soliditylang.org/.\n[16] Mohamed Imran Zacky, Syahri Helmi, and Isadora Della Cella.“Smart Con-\ntracts on the Blockchain: Design, Use Cases, and Prospects”.In: Blockchain Fron-\ntier Technology (2023).url: https://api.semanticscholar.org/CorpusID:\n272025704.[17] Andreas M Antonopoulos and Gavin Wood.Mastering ethereum: building smart\ncontracts and dapps.O’reilly Media, 2018.[18] Hossein Kakavand, Nicolette Sevres, and Bart Chilton.“The Blockchain Revolu-\ntion: An Analysis of Regulation and Technology Related to Distributed Ledger\nTechnologies”.In: SSRN Electronic Journal (Jan.2017).doi: 10.2139/ssrn.2849251.[19] Abdeljalil Beniiche.A Study of Blockchain Oracles.July 2020.doi: 10.48550/\narXiv.2004.07140.[20] Ayana T Aspembitova and Michael A Bentley.“Oracles in Decentralized Finance:\nAttack Costs, Profits and Mitigation Measures”.en.In: Entropy (Basel) 25.1\n(Dec.2022).","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"PMgaShS2XId2cE4n8FMH4oDx9uCI6AWuz448z2lvDVs="},"b34f7508-c758-47d7-a77f-4f0ea6e38c3a":{"id_":"b34f7508-c758-47d7-a77f-4f0ea6e38c3a","metadata":{"page_number":41,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"f49c5420-3b53-432a-8b35-bfc187439ad9","metadata":{"page_number":41,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"bsxYVIyL/p9w3hu+Ym3YnrHWbtTPgwlXJuH3JLYyODY="},"PREVIOUS":{"nodeId":"071cd363-c07b-439e-b892-8ed8450c3d21","metadata":{"page_number":41,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"PMgaShS2XId2cE4n8FMH4oDx9uCI6AWuz448z2lvDVs="}},"text":"In: Entropy (Basel) 25.1\n(Dec.2022).[21] Chainlink.The Intersection Between AI Models and Oracles.Available at https:\n//blog.chain.link/oracle-networks-ai/.2024.[22] Yinjie Zhao et al.“Toward trustworthy defi oracles: past, present, and future”.In: IEEE Access 10 (2022), pp.60914–60928.[23] Denys Virovets et al.“Integration of smart contracts and artificial intelligence\nusing cryptographic oracles ”.In: Aug.2024.[24] Ohm Patel.“AI-Driven Smart Contracts”.In: Journal of Artificial Intelligence &\nCloud Computing (2024).url: https://api.semanticscholar.org/CorpusID:\n272239983.39","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"Ly1lZfkoS7rc+6mqjHdUafWapwJtSdcGNuVFvE/EYdY="},"b3af8f56-4770-41ba-821a-1e03cf0ba50c":{"id_":"b3af8f56-4770-41ba-821a-1e03cf0ba50c","metadata":{"page_number":42,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"c940a564-9b4f-4dca-bded-52bd6c1bfe33","metadata":{"page_number":42,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"MJd17ZVDCCMRsz0mCDcdZZe2bm7UqNaLrjbppdfjfWk="}},"text":"[25] Mohammed Hussein Fallah et al. “AI-Powered Blockchain Systems for Real-Time\nFraud Detection in Financial Services”. In: 2024 International Conference on\nIoT, Communication and Automation Technology (ICICAT) (2024), pp. 1287–\n1291. url: https://api.semanticscholar.org/CorpusID:277193226.\n[26] Konstantinos Sgantzos and Ian Grigg. “Artificial Intelligence Implementations\non the Blockchain. Use Cases and Future Applications”. In: Future Internet 11\n(Aug. 2019), p. 170. doi: 10.3390/fi11080170.\n[27] Sankalp Chenna. “AI and Blockchain: Towards Trustworthy and Secure Intelli-\ngent Systems”. In: Journal of Advances in Artificial Intelligence 1 (Jan. 2023),\npp. 117–122. doi: 10.18178/JAAI.2023.1.2.117-122.\n[28] Vincent Charles, Ali Emrouznejad, and Tatiana Gherman. “A critical analysis of\nthe integration of blockchain and artificial intelligence for supply chain”. en. In:\nAnn Oper Res (Jan. 2023), pp. 1–41.\n[29] Nitin Rane, Saurabh Choudhary, and Jayesh Rane. “Blockchain and Artificial\nIntelligence (AI) integration for revolutionizing security and transparency in fi-\nnance”. In: SSRN Electronic Journal (Jan. 2023). doi: 10.2139/ssrn.4644253.\n[30] Satish Kumar et al. “Artificial Intelligence and Blockchain Integration in Busi-\nness: Trends from a Bibliometric-Content Analysis”. In: Information Systems\nFrontiers 25.2 (Apr. 2023), pp. 871–896. issn: 1572-9419. doi: 10.1007/s10796-\n022-10279-0. url: https://doi.org/10.1007/s10796-022-10279-0.\n40","textTemplate":"","endCharIdx":1461,"metadataSeparator":"\n","type":"TEXT","hash":"SpQspw1IB+0ZW3/K0USKNjju3ivEHv3L86UKlnZn9P8="},"76ef9b5a-b5e3-42c2-9492-b5fe28a2ff10":{"id_":"76ef9b5a-b5e3-42c2-9492-b5fe28a2ff10","metadata":{"page_number":43,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"e7c7c7d2-353f-4f4f-89da-6e9b9af43c35","metadata":{"page_number":43,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"TZ3IHbo23wD2gt6LRVpz3QmqPN8n3UT7i2+W40jW7FI="}},"text":"List of Figures\n1 Traditional international transfer . . . . . . . . . . . . . . . . . . . . . 6\n2 Submit transaction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n3 Execution / Validation phase . . . . . . . . . . . . . . . . . . . . . . . 9\n4 Consensus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n5 Final state . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n6 Block internals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n7 Block internals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n8 System sequence diagram . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n41","textTemplate":"","endCharIdx":674,"metadataSeparator":"\n","type":"TEXT","hash":"xqx4KYjH256uEXE/2CPKgHvr9RiNODuqmtQ7vuYSF6I="},"d349ec23-c14e-43c2-97ff-141258c55324":{"id_":"d349ec23-c14e-43c2-97ff-141258c55324","metadata":{"page_number":44,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"39d20688-9cdb-4642-8a2f-6f10078dfaba","metadata":{"page_number":44,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"+uuEnj5hm3MocK+fniJH+bZU7NCJDXAxGiHNfGykaKU="}},"text":"List of Figures\n42","textTemplate":"","endCharIdx":18,"metadataSeparator":"\n","type":"TEXT","hash":"YiJzpjz4GKBf9DP6Ry48Bnc8fDgF9Y7B8SEjl283j24="},"4d5e1f88-57d2-4266-a980-3413a0ac2ca6":{"id_":"4d5e1f88-57d2-4266-a980-3413a0ac2ca6","metadata":{"page_number":45,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"8a524446-884a-4bab-8fa5-afc540203d5b","metadata":{"page_number":45,"total_pages":45,"file_name":"Kirill_Thesis__2__6d4bbe0e-1efc-4cac-83b4-e37b9b177313.pdf","private":"true"},"hash":"9GfhyA/Qu9AR1F7JpWITJdu8t2q2IAdUQpimtT01BC8="}},"text":"Listings\n1 Solidity example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n43","textTemplate":"","endCharIdx":93,"metadataSeparator":"\n","type":"TEXT","hash":"tJFhwIZopSb9Axm5Nfa0SUgPNrz1xOuidjZ07lO17L8="}},"type":"simple_dict"}}}